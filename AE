# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5FM3E4IDQTT6xwFT25_J92woic9_vnV
"""

from google.colab import drive
drive.mount('/content/drive')
import os

import cv2
import numpy as np
from keras.layers import Conv3D, MaxPooling3D
from tensorflow.keras.layers import Input, Conv3DTranspose, ConvLSTM2D
from tensorflow.keras.models import Model


def create_AE(optical_flow_dataset):
    num_datasets, frames, height, width, channels = optical_flow_dataset.shape
    #num_datasets, height, width, channels = optical_flow_dataset.shape

    # Encoder
    input_data = Input(shape=(frames, height, width, channels))
    encoded = Conv3D(128, (3, 3, 3), activation='relu', padding='same')(input_data)
    encoded = MaxPooling3D((2, 2, 1), padding='same')(encoded)
    encoded = Conv3D(64, (3, 3, 3), activation='relu', padding='same')(encoded)
    encoded = MaxPooling3D((2, 2, 1), padding='same')(encoded)
    encoded = ConvLSTM2D(64, (3, 3), padding='same', return_sequences=True)(encoded)
    encoded = ConvLSTM2D(32, (3, 3), padding='same', return_sequences=True)(encoded)
    encoded = ConvLSTM2D(64, (3, 3), padding='same', return_sequences=True)(encoded)

    # Decoder
    decoded = Conv3DTranspose(64, (3, 3, 3), strides=(2, 2, 1), padding='same', activation='relu')(encoded)
    decoded = Conv3DTranspose(128, (3, 3, 3), strides=(2, 2, 1), padding='same', activation='relu')(decoded)
    decoded = Conv3D(2, (3, 3, 3), activation='sigmoid', padding='same')(decoded)

    # Autoencoder model
    return Model(input_data, decoded)



def train_model(autoencoder, optical_flow_dataset, batch_size, num_epochs):

    autoencoder.compile(optimizer='adam', loss='mae')

    autoencoder.fit(
        optical_flow_dataset,
        optical_flow_dataset,
        batch_size=batch_size,
        epochs=num_epochs
    )
    return autoencoder


#trained_autoencoder = train_model(autoencoder, optical_flow_dataset, batch_size, num_epochs)

